package com.eloelo.analyticsimport android.app.Applicationimport android.util.Logimport androidx.work.Configurationimport androidx.work.DelegatingWorkerFactoryimport com.greenhorn.neuronet.EloAnalyticsSdkimport com.greenhorn.neuronet.utils.EloAnalyticsConfigimport com.greenhorn.neuronet.utils.EloAnalyticsRuntimeProviderimport com.greenhorn.neuronet.worker.syncWorker.EloAnalyticsWorkerFactoryprivate const val TAG = "EloEloApplication"class EApplication : Application(), Configuration.Provider{    private lateinit var delegatingWorkerFactory: DelegatingWorkerFactory    override fun onCreate() {        super.onCreate()        delegatingWorkerFactory = DelegatingWorkerFactory()        EloAnalyticsSdk.Builder(this)            .setRuntimeProvider(object : EloAnalyticsRuntimeProvider {                override suspend fun isUserLoggedIn(): Boolean {                    return true                }                override fun getAppVersionCode(): String {                    return "13133123"                }                override suspend fun getCurrentUserId(key: String): Long {                    return 10000                }                override suspend fun getGuestUserId(key: String): Long {                    return 111011L                }                override fun isAnalyticsSdkEnabled(): Boolean {                    return true                }            })            .setConfig(                config = EloAnalyticsConfig(                    batchSize = 2,                    baseUrl = "https://central-analytics-producer.eloelo.in/",                    endpointUrl = "v2/analytics/send/event/test",                    isDebug = true,                    headers = mapOf("version_code" to "1212",                        "father" to "23")                )            )            .build()        // Add analytics library's worker factory using dependency container from SDK        delegatingWorkerFactory.addFactory(            EloAnalyticsWorkerFactory()        )    }    override val workManagerConfiguration: Configuration        get() = Configuration.Builder()            .setMinimumLoggingLevel(Log.INFO)            .setWorkerFactory(delegatingWorkerFactory)            .build()}